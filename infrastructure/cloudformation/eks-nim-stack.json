{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "IntelliNemo Agent - EKS NVIDIA NIM Deployment (Hackathon Compliant)",
  "Parameters": {
    "NvidiaApiKey": {
      "Type": "String",
      "NoEcho": true,
      "Default": "MmxtdHJyaTNpN2JnZTVuaTNuNThqbzVuOHY6ZTUyNjBhNGYtOGY1MC00ZTc2LWFjMzktNzUxODliYTM5ZTNh",
      "Description": "NVIDIA NGC API Key"
    }
  },
  "Resources": {
    "EKSCluster": {
      "Type": "AWS::EKS::Cluster",
      "Properties": {
        "Name": "intellinemo-cluster",
        "Version": "1.28",
        "RoleArn": {"Fn::GetAtt": ["EKSServiceRole", "Arn"]},
        "ResourcesVpcConfig": {
          "SubnetIds": [
            {"Ref": "PublicSubnet1"},
            {"Ref": "PublicSubnet2"}
          ]
        }
      }
    },
    "EKSServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": "eks.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
        ]
      }
    },
    "NodeGroup": {
      "Type": "AWS::EKS::Nodegroup",
      "Properties": {
        "ClusterName": {"Ref": "EKSCluster"},
        "NodegroupName": "nim-nodes",
        "NodeRole": {"Fn::GetAtt": ["NodeInstanceRole", "Arn"]},
        "InstanceTypes": ["t3.medium"],
        "AmiType": "AL2_x86_64",
        "ScalingConfig": {
          "MinSize": 1,
          "MaxSize": 2,
          "DesiredSize": 1
        },
        "Subnets": [
          {"Ref": "PublicSubnet1"},
          {"Ref": "PublicSubnet2"}
        ]
      }
    },
    "NodeInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": "ec2.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
          "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
          "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        ]
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": {"Fn::Select": [0, {"Fn::GetAZs": ""}]},
        "MapPublicIpOnLaunch": true
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": {"Fn::Select": [1, {"Fn::GetAZs": ""}]},
        "MapPublicIpOnLaunch": true
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "InternetGatewayId": {"Ref": "InternetGateway"}
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": {"Ref": "PublicRouteTable"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "InternetGateway"}
      }
    },
    "PublicSubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "PublicSubnet1"},
        "RouteTableId": {"Ref": "PublicRouteTable"}
      }
    },
    "PublicSubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "PublicSubnet2"},
        "RouteTableId": {"Ref": "PublicRouteTable"}
      }
    },
    "NvidiaApiKeySecret": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Name": "intellinemo/nvidia-api-key",
        "SecretString": {"Ref": "NvidiaApiKey"}
      }
    },
    "IntelliNemoLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "intellinemo-agent-eks",
        "Runtime": "python3.9",
        "Handler": "lambda_function.lambda_handler",
        "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]},
        "Code": {
          "ZipFile": "import json\ndef lambda_handler(event, context):\n    return {'statusCode': 200, 'body': 'EKS deployment ready'}"
        },
        "Environment": {
          "Variables": {
            "CLUSTER_NAME": {"Ref": "EKSCluster"},
            "NVIDIA_API_SECRET": {"Ref": "NvidiaApiKeySecret"}
          }
        }
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": "lambda.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [{
          "PolicyName": "EKSAccess",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "eks:DescribeCluster",
                "secretsmanager:GetSecretValue"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    }
  },
  "Outputs": {
    "ClusterName": {
      "Value": {"Ref": "EKSCluster"},
      "Description": "EKS Cluster Name"
    },
    "ClusterEndpoint": {
      "Value": {"Fn::GetAtt": ["EKSCluster", "Endpoint"]},
      "Description": "EKS Cluster Endpoint"
    }
  }
}